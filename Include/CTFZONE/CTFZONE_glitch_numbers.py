def egcd(a, b):
    if a == 0:
        return (b, 0, 1)
    else:
        g, y, x = egcd(b % a, a)
        return (g, x - (b // a) * y, y)

def modinv(a, m):
    g, x, y = egcd(a, m)
    if g != 1:
        raise Exception('modular inverse does not exist')
    else:
        return x % m


n1 = 13890400370674703153896692845306183879327538579820161483100097056681741364179874324463300532385578038622195962385541517111165598284200762389640596645806204515642683392316513593808528497913216143865500441261551800705826407247288129990600550043362548636123989441781112288169673797348899197742993549896360517082677344047683297797291052945261970296866064450351144465063457198758164263087446904886904790073738852517790794957076589697048592594895311068282591021712945029171300147083972912192081741440892419618824040214395962516373017170339537804640705181464851852460187349940832509359227688992488050281334709252562364988033916757967560986517410533299737109086222887840631570449315734610603436449563158158527232115906920437707709262573724194611886003493006658097161065555688648440790437422505351587388413441437427621480252385605774351347244181592080822159908623255536271844231080575633628878526626568019143212220718834021454997792177797655054496583691133060855009300744273566218592489660212124623728263091929296807460125145879087055104631647885970484226811107660138480517089735945074646738808538317226870334929630715832398916095437956187599101706886066773517335204720791488014282890925737526692680645540760458296933028127352653448650716973296577795899385167892167555441080932337774511556095312590658762559260286339590403486478674421324555479357311830132774529491856310707819578154240667494442966629492026425333916754195724003386431317128025651714212945059738534759206081266706716813662299528868945320744528180483774535220768269996914587390460784854113324661549552134079864891810310512676926672824607457333734719744719537726045747041342184824257407562083191793003888957604542108887925558948508372437480504569507372845888362047714665990645328557827999652731748511263527009335348506507645392125702840497424346584243069697154014680253701926657149350926022586183421726346374647955528553409907744435767147293948160244090761127265893888441
e = 65537 #from rsa pub
p = -1
flag = False
for n in range(1, 2000):
    if flag == True:
        break
    for i in range(10):
        if flag == True:
            break
        for j in range(10):
            if i%2 == 0:
                s = str(i) * (n-1) + str(j)
                if int(s) == 0:
                    continue
                if n1 % (int(s)) == 0 and int(s) != 1:
                    p = int(s)
                    flag = True
                    break

            else:
                for k in range(n):
                    s = str(i) * k + str(j) + str(i) * (n-1-k)
                    if int(s) == 0:
                        continue
                    if n1 % (int(s)) == 0 and int(s) != 1:
                        p = int(s)
                        flag=True
                        break
p
q = n1//p
phi = (q-1) * (p-1)
a = open('encrypted', 'rb')
m = a.read()
m = str(m.hex())
d = modinv(e, phi)
he = hex(pow(int(m, 16), d, n1))
print(he) # flag here
print(bytes.fromhex(str(he[2:]).strip()))